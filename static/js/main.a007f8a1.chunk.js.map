{"version":3,"sources":["models/Kata.ts","components/KataCard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultKata","title","description","katas","KataCard","props","kata","Card","className","Body","Title","Text","style","textAlign","App","useState","setKata","backgroundColor","minHeight","display","flexDirection","alignItems","justifyContent","color","Button","variant","size","onClick","Math","floor","random","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAKaA,EAAc,CAAEC,MAAO,YAAaC,YAAa,gCAExDC,EAAgB,CAClB,CACIF,MAAO,eACPC,YAAa,qX,OCiBNE,G,MAjBmB,SAACC,GAAW,IAClCC,EAASD,EAATC,KAER,OACI,kBAACC,EAAA,EAAD,CAAMC,UAAU,4BACZ,yBAAKA,UAAU,sCACX,kBAACD,EAAA,EAAKE,KAAN,CAAWD,UAAU,YACjB,kBAACD,EAAA,EAAKG,MAAN,KAAaJ,EAAKL,OAClB,kBAACM,EAAA,EAAKI,KAAN,CAAWC,MAAO,CAAEC,UAAW,YAC1BP,EAAKJ,kBCoBfY,EAjCH,WAAO,IAAD,EACUC,mBAAef,GADzB,mBACPM,EADO,KACDU,EADC,KAkBd,OACI,yBAAKJ,MAX0B,CAC/BC,UAAW,SACXI,gBAAiB,UACjBC,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,WAKZ,wBAAIV,MAAO,CAACW,MAAO,UAAnB,aACA,kBAACC,EAAA,EAAD,CACIC,QAAQ,UACRC,KAAK,KACLC,QArBgB,WACxB,IAAMrB,EFYHH,EAAMyB,KAAKC,MAAMD,KAAKE,SAAW3B,EAAM4B,SEX1Cf,EAAQV,KAgBJ,qBAOCA,GAAQ,kBAAC,EAAD,CAAUA,KAAMA,MCtBjB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a007f8a1.chunk.js","sourcesContent":["interface Kata {\n    title: string\n    description: string\n}\n\nexport const defaultKata = { title: \"Some Kata\", description: \"Here you're gonna find kata.\" }\n\nconst katas: Kata[] = [\n    {\n        title: \"Secret Santa\",\n        description: \"Write a function that receives a set of \" +\n            \"strings representing the names of the Secret Santa participants \" +\n            \"and returns a dictionary, hash map, object or equivalent where the \" +\n            \"keys are participants and the values are the participant picked for that\" +\n            \"participant.\\n\\n\" +\n            \"Rules:\\n\" +\n            \"- Participants can only be picked by a single participant.\\n\" +\n            \"- Participants can not pick themselves.\\n\"\n    }\n]\n\nexport const getRandomKata = (): Kata => {\n    return katas[Math.floor(Math.random() * katas.length)];\n}\n\nexport default Kata\n","import Kata from \"../models/Kata\";\nimport React from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\nimport \"./styles.css\";\n\ninterface Props {\n    kata: Kata;\n}\n\nconst KataCard: React.FC<Props> = (props) => {\n    const { kata } = props\n\n    return (\n        <Card className=\"overflow-scroll-gradient\">\n            <div className=\"overflow-scroll-gradient__scroller\">\n                <Card.Body className=\"cardBody\">\n                    <Card.Title>{kata.title}</Card.Title>\n                    <Card.Text style={{ textAlign: \"justify\"}}>\n                        {kata.description}\n                    </Card.Text>\n                </Card.Body>\n            </div>\n        </Card>\n    )\n}\n\nexport default KataCard","import React, {useState} from 'react';\nimport './App.css';\nimport Button from \"react-bootstrap/Button\";\nimport Kata, {defaultKata, getRandomKata} from \"./models/Kata\";\nimport KataCard from \"./components/KataCard\";\n\nconst App = () => {\n    const [kata, setKata] = useState<Kata>(defaultKata)\n\n    const handleGetRandomKata = () => {\n        const kata = getRandomKata()\n        setKata(kata)\n    }\n\n    const style: React.CSSProperties = {\n        textAlign: \"center\",\n        backgroundColor: \"#282c34\",\n        minHeight: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    }\n\n    return (\n        <div style={style}>\n            <h1 style={{color: \"white\"}}>Code Kata</h1>\n            <Button\n                variant=\"primary\"\n                size=\"lg\"\n                onClick={handleGetRandomKata}\n            >\n                Get a random Kata\n            </Button>\n            {kata && <KataCard kata={kata}/>}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}